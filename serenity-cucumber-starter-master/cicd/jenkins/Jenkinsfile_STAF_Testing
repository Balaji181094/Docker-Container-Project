/*
 Library declaration.
  Notes:
  identifier includes the version of the library (git tag / branch)
  remote includes the repository git url
  credentialsId needs to be of the type SSH key in Jenkins
  _ at the end of the declaration loads the whole library

  This section always runs in the master jenkins.
*/
library(
      identifier: 'jsl-jenkins-shared-library@master',
      retriever: modernSCM(
        [
          $class: 'GitSCMSource',
          remote: "git@github.com:CenturyLink/jsl-jenkins-shared-library.git",
          credentialsId: 'SCMAUTO_SSH_DEVOPS_PIPELINE',
	  extensions: [[$class: 'WipeWorkspace']]
        ]
      )
    ) _

pipeline {

    environment {

      /*
        Credentials:
        GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential
        GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential.
        DOCKER_CREDENTIALS Docker access info, jenkins secret file credential with environment variables to export
        KUBE_CREDENTIALS Kubernetes access info, jenkins secret file credential with environment variables to export. For PRs.
        KUBE_CREDENTIALS_TEST Kubernetes access info, jenkins secret file credential with environment variables to export. For branches.
        AMAZON_CREDENTIALS AWS access info, jenkins secret file credential with environment variables to export
        SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret text
        GCP_CREDENTIALS GCP access info, jenkins secret file credential with environment variables to export
        JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export
        MSTEAMS_CREADENTIALS MS Teams access info, jenkins secret text
      */
      GITHUB_TOKEN_CREDENTIALS = 'GITHUB_APP_CREDENTIALS'
      GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
      DOCKER_CREDENTIALS = 'nexus-secrets'
      KUBE_CREDENTIALS = 'kube-secret-dev'
      // KUBE_CREDENTIALS_DEV = 'kube-secret-dev'
      KUBE_CREDENTIALS_TEST = 'kube-secret-test'
      // KUBE_CREDENTIALS_PROD = 'kube-secret-test' /*'kube-secret-prod'*/
      //SONARQUBE_CREDENTIALS = 'sonar-secrets'
      SONARQUBE_CREDENTIALS = 'sonarscnprod'
      QUALITY_GATE_CREDENTIALS = 'qualitygate-secret'
      JIRA_CREDENTIALS = 'jira-credentials'
      XRAY_CREDENTIALS = 'xray-credentials'    
      JIRA_SERVER_INSTANCE_ID = 'CLOUD-482e318d-9fc6-4be6-9089-2646e78fcac3' 
	  // Update for Dev Unifed : 'CLOUD-66c37195-7903-495a-94c3-259f15e1e3a8'
      JIRA_TESTAUTO_CREDENTIALS = 'JIRA_CREDENTIALS_TESTAUTO' //'Jira-testauto-credentials'
      XRAY_TESTAUTO_ID_SECRET = 'JIRA_XRAY_IDSECRET_TESTAUTO' //'xray-testauto'
      AMAZON_CREDENTIALS = ''
      GCP_CREDENTIALS = ''
      //JIRA_AUTO_CREDENTIALS = 'Jira-Xray-Key'
      //MSTEAMS_CREDENTIALS = 'teams-secret'
    
	  //Deployment control credentialsId
      AUTHORIZED_USERS = 'authorized_users'
      DEPLOY_AUTH_TOKEN = 'deploy_auth_token'

      // Custom project variables
      BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
      COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
      PULL_REQUEST="pr-${env.CHANGE_ID}"
      PROJECT_NAME = 'PROJECT'
      DOCKER_REPO ='PROJECT_REPO'
      IMAGE_NAME = "${env.PROJECT_NAME}"
      IMAGE_TAG =  "${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
    }

    parameters {
      //      https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
      choice(name: 'Environment', choices: ['TEST1', 'TEST2', 'TEST3', 'TEST4'], description: '')
      choice(name: 'TestType', choices: ['Sanity'], description: '')
      choice(name: 'MAL', choices: ['ESHOP'], description: '')
      choice(name: 'TestTool', choices: ['STAF'], description: '')
      string(name: 'Tag', defaultValue: '@Sample', trim: true)
      string(name: 'ImplicitWait', defaultValue: '5000', trim: true)
	  //choice(name: 'ThreadCount', choices: ['4','2','1'], description: '')
    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    Add agent sections in stages/stage if needed.
    */
    agent {
      label 'Docker-enabled'
    }

    options {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#options
      */
      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'1', daysToKeepStr: '1'))
      disableConcurrentBuilds()
    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
    */
    triggers {
     // cron('H/30 * * * *')
      issueCommentTrigger('.*test this please.*')
    }

    stages {


      stage('Sanity Test') {
        agent {
          dockerfile {
              filename 'Dockerfile_Staf_test'
              dir 'cicd/docker/selenium'
              label 'Docker-enabled'
          }
        }
        steps {
          script {
            configFileProvider([configFile(fileId: 'MAVEN-SETTINGS', variable: 'MAVEN_SETTINGS')]) {
          script {
		  checkout([$class: 'GitSCM', branches: [[name: '*/STAF_Version_3.2.2']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'testauto-staf']], gitTool: 'git 2.9', userRemoteConfigs: [[credentialsId: 'SCMAUTO_GITHUB', url: 'https://github.com/CenturyLink/testauto-staf.git']]])
		  sh "mvn -s ${MAVEN_SETTINGS} -f $WORKSPACE/testauto-staf/pom.xml clean install -ntp"
            sh 'cd SampleTools && mvn -s ${MAVEN_SETTINGS} clean install -ntp'
            try {
		println "${params.Tag} ${params.MAL}  ${params.TestType} ${params.Environment}"
		sh "google-chrome --version"
		sh "cd SampleTests && mvn -s ${MAVEN_SETTINGS} clean verify serenity:aggregate -Dcucumber.options='src/test/resources --tags ${params.Tag} --tags ~@Pending --plugin json:target/CucumberReport.json --plugin junit:target/cucumber-reports/Cucumber.xml' -Dstaf.mal.key=${params.MAL} -Dstaf.testtype.key=${params.TestType} -Dstaf.environment.key=${params.Environment} -Dwebdriver.driver=chrome -Dwebdriver.timeouts.implicitlywait=${params.ImplicitWait} -Dchrome.switches=--no-sandbox,--disable-dev-shm-usage,--disable-gpu,--headless -Dheadless.mode=true -ntp"
		sh 'mkdir -p qareports && cp SampleTests/target/cucumber-reports/Cucumber-Sanity.xml qareports/Cucumber-Sanity.xml'
		stash name: 'qareports' , includes: 'qareports/**'
		stash name: 'result' , includes: 'JanusCommercialTests/target/cucumber-reports/Cucumber.xml'
		stash name: 'htmlresult' , includes: 'JanusCommercialTests/target/report/Report.html'
            }
            catch (Exception e) {
              println "Tests executed but failed. Check the logs, login is working." + e
            }
          
	     jslPublishCucumberReport('JanusCommercialTests/target/CucumberReport.json','Sanity Report')
	   
          }
        }
      }
    }
  }// stage('Sanity Test')
 }// stages
    post {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#post

      Always post somewhere the watermark:
	- md5sum of Jenkinsfile
	- Output of the Jenkinsfile checker output
      */
      always
      {
         unstash 'htmlresult'
         jslEmailNotification('dharmendra.gupta@lumen.com', 'dharmendra.gupta@lumen.com','Job Name:${JOB_NAME} BuildNo:${BUILD_NUMBER} BuildNo:${BUILD_STATUS}','SampleTests/target/report/Report.html,SampleTests/target/report/*.png','''${FILE,path="SampleTests/target/report/Report.html"} Build Url : ${BUILD_URL}''','text/html') 
         cleanWs()

      }
      success {
        /* Contract Validation Gate */
       // jslNotification('success')
        cleanWs()
      }
      failure {
        /* Contract Validation Gate */
      //  jslNotification('failure')
        cleanWs()
      }
    }
}
