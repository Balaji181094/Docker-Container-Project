
/*
 Library declaration.
  Notes:
  identifier includes the version of the library (git tag / branch)
  remote includes the repository git url
  credentialsId needs to be of the type SSH key in Jenkins
  _ at the end of the declaration loads the whole library
  This section always runs in the master jenkins.
*/
// 
library(
    identifier: 'jsl-jenkins-shared-library@qualitygate_new',
    retriever: modernSCM(
        [
            $class: 'GitSCMSource',
            remote: 'https://github.com/ab68523/jsl-jenkins-shared-library.git',
            credentialsId: 'SCMAUTO_GITHUB',
            extensions: [[$class: 'WipeWorkspace']]
        ]
    )
) _
pipeline {

    environment {

      /*
        Credentials:
        GITHUB_TOKEN_CREDENTIALS github token, jenkins user password credential
        GITHUB_SSH_CREDENTIALS github ssh private key, jenkins private key credential.
        DOCKER_CREDENTIALS Docker access info, jenkins secret file credential with environment variables to export
        KUBE_CREDENTIALS Kubernetes access info, jenkins secret file credential with environment variables to export. For PRs.
        KUBE_CREDENTIALS_TEST Kubernetes access info, jenkins secret file credential with environment variables to export. For branches.
        AMAZON_CREDENTIALS AWS access info, jenkins secret file credential with environment variables to export
        SONARQUBE_CREDENTIALS Sonarqube access info, jenkins secret text
        GCP_CREDENTIALS GCP access info, jenkins secret file credential with environment variables to export
        JIRA_CREDENTIALS Jira access info, jenkins secret file credential with environment variables to export
        MSTEAMS_CREADENTIALS MS Teams access info, jenkins secret text
      */
      GITHUB_TOKEN_CREDENTIALS = 'GITHUB_APP_CREDENTIALS'
      GITHUB_SSH_CREDENTIALS = 'SCMAUTO_SSH_DEVOPS_PIPELINE'
      DOCKER_CREDENTIALS = 'nexus-secrets'
      KUBE_CREDENTIALS = 'kube-secret-dev'
      // KUBE_CREDENTIALS_DEV = 'kube-secret-dev'
      KUBE_CREDENTIALS_TEST = 'kube-secret-test'
      // KUBE_CREDENTIALS_PROD = 'kube-secret-test' /*'kube-secret-prod'*/
      //SONARQUBE_CREDENTIALS = 'sonar-secrets'
      SONARQUBE_CREDENTIALS = 'sonarscnprod'
      QUALITY_GATE_CREDENTIALS = 'qualitygate-secret'
      JIRA_CREDENTIALS = 'jira-credentials'
      XRAY_CREDENTIALS = 'xray-credentials'    
      JIRA_SERVER_INSTANCE_ID = 'CLOUD-482e318d-9fc6-4be6-9089-2646e78fcac3' // Update for Dev Unifed : 'CLOUD-66c37195-7903-495a-94c3-259f15e1e3a8'
      JIRA_TESTAUTO_CREDENTIALS = 'JIRA_CREDENTIALS_TESTAUTO' //'Jira-testauto-credentials'
      XRAY_TESTAUTO_ID_SECRET = 'JIRA_XRAY_IDSECRET_TESTAUTO' //'xray-testauto'
      AMAZON_CREDENTIALS = ''
      GCP_CREDENTIALS = ''
      //JIRA_AUTO_CREDENTIALS = 'Jira-Xray-Key'
      //MSTEAMS_CREDENTIALS = 'teams-secret'
      TAG = '${env.NODE_NAME}'
	  
	  //Deployment control credentialsId
      AUTHORIZED_USERS = 'authorized_users'
      DEPLOY_AUTH_TOKEN = 'deploy_auth_token'

	    

      // Custom project variables
      
      
      // Custom project variables
      BRANCH_NAME = GIT_BRANCH.split('/')[-1].trim().toLowerCase()
      COMMIT_ID = GIT_COMMIT.substring(0,7).trim().toLowerCase()
      PULL_REQUEST="pr-${env.CHANGE_ID}"
      PROJECT_NAME = 'PROJECT'
      PROJECT_MAL  = "ESHOP"
      DOCKER_REPO ='PROJECT_REPO'
      IMAGE_NAME = "${env.PROJECT_NAME}"
      IMAGE_TAG =  "${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME = "${env.PROJECT_NAME}-${env.PULL_REQUEST}"
      KUBE_DOCKER_SECRET_NAME_TEST = "${env.PROJECT_NAME}-${env.BRANCH_NAME}"
      
      
      
    }

    parameters {
      //      https://www.jenkins.io/doc/book/pipeline/syntax/#parameters
      choice(name: 'Environment', choices: ['Test1', 'Test2'], description: '')
      choice(name: 'TestType', choices: ['Sanity'], description: '')
      choice(name: 'MAL', choices: ['ESHOP'], description: '')
      choice(name: 'TestTool', choices: ['STAF'], description: '')
      string(name: 'ProjectKey', defaultValue: 'XIS', description: '')

    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#agent
    Add agent sections in stages/stage if needed.
    */
    agent {
      label 'Docker-enabled'
    }

    options {
      /*
      https://www.jenkins.io/doc/book/pipeline/syntax/#options
      */
      timestamps ()
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr:'3', daysToKeepStr: '5'))
      disableConcurrentBuilds()
    }

    /*
    https://www.jenkins.io/doc/book/pipeline/syntax/#triggers
    */
    triggers {
     // pollSCM('*/5 * * * *')
      issueCommentTrigger('.*test this please.*')
     
    }

    stages {
        stage('Non-Parallel Stage') {
            steps {
                echo 'This stage will be executed first.'
            }
        }
        stage('Parallel Stage') {
            when { expression { return (env.BRANCH_NAME.contains('-test1') || env.BRANCH_NAME.contains('-test2') || env.BRANCH_NAME.contains('-test3')) } }
            parallel {
                stage ('parallel stage -1') {
                    steps{
                        echo "please execute parallel stage -1 ${env.BRANCH_NAME}"
                    }
                    
                }
                stage ('parallel stage -2') {
                    steps{
                        echo 'parallel stage -2'
                    }
                }
            }
    }
        
	    
	
  
}
  post {
    always {
      cleanWs()
    }
}
}